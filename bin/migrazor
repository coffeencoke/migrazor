#!/usr/bin/env ruby
# 1.9 adds realpath to resolve symlinks; 1.8 doesn't
# have this method, so we add it so we get resolved symlinks
# and compatibility
unless File.respond_to? :realpath
  class File #:nodoc:
    def self.realpath path
      return realpath(File.readlink(path)) if symlink?(path)
      path
    end
  end
end
$: << File.expand_path(File.dirname(File.realpath(__FILE__)) + '/../lib')
require 'rubygems'
require 'gli'
require 'migrazor_version'
require 'backup_performer'
require 'backup_location'

include GLI

program_desc 'Migrate from one host to the next'

version Migrazor::VERSION

desc 'Backup the files and databases from the old server'
command :backup do |c|
  c.desc 'Dry run, display what will happen but do not execute'
  c.switch :dry, :d

  c.desc 'Force backup, overwrite existing backups'
  c.switch :force, :f

  c.action do |global_options,options,args|
    backup_performer = BackupPerformer.new(global_options, options, args)
    if backup_performer.ready?
      backup_performer.call
      puts %Q(
****************************
     Migrazor happened
****************************

Files and Databases have been backed up successfully and are located at #{backup_performer.backup_location_directory}
)
    else
      puts %Q(
!!!!!!!!!!!!!!!!!!!!!!!!!!!!
      Migrazor Failed
!!!!!!!!!!!!!!!!!!!!!!!!!!!!

Files and Databases could not begin backup because...

#{backup_performer.errors.join("\n")}
)
    end
  end
end

desc 'Describe copy here'
arg_name 'Describe arguments to copy here'
command :copy do |c|
  c.action do |global_options,options,args|
  end
end

desc 'Describe cleanup here'
arg_name 'Describe arguments to cleanup here'
command :cleanup do |c|
  c.action do |global_options,options,args|
  end
end

pre do |global,command,options,args|
  # Pre logic here
  # Return true to proceed; false to abourt and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit GLI.run(ARGV)
